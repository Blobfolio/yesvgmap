/*!
# Yesvgmap
*/

#![forbid(unsafe_code)]

#![deny(
	clippy::allow_attributes_without_reason,
	clippy::correctness,
	unreachable_pub,
)]

#![warn(
	clippy::complexity,
	clippy::nursery,
	clippy::pedantic,
	clippy::perf,
	clippy::style,

	clippy::allow_attributes,
	clippy::clone_on_ref_ptr,
	clippy::create_dir,
	clippy::filetype_is_file,
	clippy::format_push_string,
	clippy::get_unwrap,
	clippy::impl_trait_in_params,
	clippy::lossy_float_literal,
	clippy::missing_assert_message,
	clippy::missing_docs_in_private_items,
	clippy::needless_raw_strings,
	clippy::panic_in_result_fn,
	clippy::pub_without_shorthand,
	clippy::rest_pat_in_fully_bound_structs,
	clippy::semicolon_inside_block,
	clippy::str_to_string,
	clippy::string_to_string,
	clippy::todo,
	clippy::undocumented_unsafe_blocks,
	clippy::unneeded_field_pattern,
	clippy::unseparated_literal_suffix,
	clippy::unwrap_in_result,

	macro_use_extern_crate,
	missing_copy_implementations,
	missing_docs,
	non_ascii_idents,
	trivial_casts,
	trivial_numeric_casts,
	unused_crate_dependencies,
	unused_extern_crates,
	unused_import_braces,
)]

#![expect(clippy::redundant_pub_crate, reason = "Unresolvable.")]



mod error;
mod img;



use argyle::Argument;
use dactyl::traits::NiceInflection;
use dowser::{
	Dowser,
	Extension,
};
pub(crate) use error::SvgError;
use fyi_msg::Msg;
use img::{
	HideType,
	Map,
};
use std::{
	borrow::Cow,
	path::PathBuf,
	process::ExitCode,
};



// The E_SVG constant is generated by build.rs.
include!(concat!(env!("OUT_DIR"), "/yesvgmap-extensions.rs"));



/// # Main.
fn main() -> ExitCode {
	match main__() {
		Ok(()) => ExitCode::SUCCESS,
		Err(e @ (SvgError::PrintHelp | SvgError::PrintVersion)) => {
			println!("{e}");
			ExitCode::SUCCESS
		},
		Err(e) => {
			Msg::error(e.to_string()).eprint();
			ExitCode::SUCCESS
		},
	}
}

#[inline]
/// # Actual main.
///
/// Do our work here so we can easily bubble up errors and handle them nice and
/// pretty.
fn main__() -> Result<(), SvgError> {
	// Parse CLI arguments.
	let args = argyle::args()
		.with_keywords(include!(concat!(env!("OUT_DIR"), "/argyle.rs")));

	let mut class = None;
	let mut hide = HideType::None;
	let mut id = None;
	let mut out = None;
	let mut paths = Dowser::default();
	let mut prefix = Cow::Borrowed("i");
	for arg in args {
		match arg {
			Argument::Key("-h" | "--help") => return Err(SvgError::PrintHelp),
			Argument::Key("--hidden") => { hide = HideType::Hidden; },
			Argument::Key("--offscreen") => { hide = HideType::Offscreen; },
			Argument::Key("-V" | "--version") => return Err(SvgError::PrintVersion),

			Argument::KeyWithValue("-l" | "--list", s) => {
				paths.read_paths_from_file(&s)
					.map_err(|_| SvgError::Read(PathBuf::from(s)))?;
			},
			Argument::KeyWithValue("--map-class", s) => { class.replace(s); },
			Argument::KeyWithValue("--map-id", s) => { id.replace(s); },
			Argument::KeyWithValue("-o" | "--output", s) => {
				let s = PathBuf::from(s);
				if ! s.is_dir() { out.replace(s); }
			},
			Argument::KeyWithValue("-p" | "--prefix", s) => { prefix = Cow::Owned(s); },

			Argument::Path(s) => { paths = paths.with_path(s); },

			// Mistake?
			Argument::Other(s) => return Err(SvgError::InvalidCli(s)),
			Argument::InvalidUtf8(s) => return Err(SvgError::InvalidCli(s.to_string_lossy().into_owned())),

			// Nothing else is relevant.
			_ => {},
		}
	}

	// Find the files!
	let map = Map::new(
		id.as_deref(),
		class.as_deref(),
		hide,
		&prefix,
		&paths.filter(|p| Some(E_SVG) == Extension::try_from3(p)).collect::<Vec<_>>()
	)?;

	// Save it to a file.
	if let Some(path) = out {
		write_atomic::write_file(&path, map.to_string().as_bytes())
			.map_err(|_| SvgError::Write)?;

		Msg::success(format!(
			"A sprite with {} has been saved to {:?}",
			map.len().nice_inflect("image", "images"),
			std::fs::canonicalize(&path).unwrap()
		)).eprint();
	}
	// Just print it.
	else {
		Msg::success(format!(
			"Generated a sprite with {}.",
			map.len().nice_inflect("image", "images"),
		)).eprint();

		println!("{map}");
	}

	// Done!
	Ok(())
}
